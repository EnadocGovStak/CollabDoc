import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import DocumentEditor from '../../components/DocumentEditor';
import { AuthProvider } from '../../contexts/AuthContext';

// Mock the auth context
jest.mock('../../contexts/AuthContext', () => ({
  AuthProvider: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,
  useAuth: () => ({
    getAccessToken: jest.fn().mockResolvedValue('mock-token')
  })
}));

// Mock Syncfusion document editor
jest.mock('@syncfusion/ej2-react-documenteditor', () => ({
  DocumentEditorContainerComponent: (props: any) => (
    <div data-testid="document-editor">Document Editor</div>
  ),
  Toolbar: jest.fn(),
  Print: jest.fn(),
  SfdtExport: jest.fn(),
  WordExport: jest.fn(),
  Editor: jest.fn(),
  Selection: jest.fn(),
  EditorHistory: jest.fn()
}));

describe('DocumentEditor Component', () => {
  test('renders document editor with action buttons', () => {
    render(<DocumentEditor />);
    
    // Check if the editor is rendered
    expect(screen.getByTestId('document-editor')).toBeInTheDocument();
    
    // Check if the action buttons are rendered
    expect(screen.getByText('Save')).toBeInTheDocument();
    expect(screen.getByText('Export')).toBeInTheDocument();
  });
  
  test('save button is disabled when in read-only mode', () => {
    render(<DocumentEditor readOnly={true} />);
    
    // Check if the save button is disabled
    const saveButton = screen.getByText('Save');
    expect(saveButton).toBeDisabled();
  });
}); 