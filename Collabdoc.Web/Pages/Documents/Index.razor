@page "/documents"
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Collabdoc.Web.Services
@using Collabdoc.Web.Data.Entities
@inject IDocumentRepository DocumentRepository
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Documents - Collabdoc</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="text-decoration-none">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Documents</li>
                </ol>
            </nav>
            
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-5 text-primary">
                        <i class="fas fa-file-alt me-3"></i>
                        Documents
                    </h1>
                    <p class="lead">Manage all your documents in one place</p>
                </div>
                <div class="d-flex gap-2">
                    <SfButton CssClass="btn btn-primary" OnClick="CreateNewDocument" IsPrimary="true">
                        <i class="fas fa-plus me-2"></i>New Document
                    </SfButton>
                    <SfButton CssClass="btn btn-outline-primary" OnClick="UploadDocument">
                        <i class="fas fa-upload me-2"></i>Upload
                    </SfButton>
                </div>
            </div>
        </div>
    </div>

    <!-- Document Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <SfCard>
                <CardContent>
                    <div class="text-center">
                        <i class="fas fa-file-alt fa-2x text-primary mb-2"></i>
                        <h5>Total Documents</h5>
                        <span class="badge bg-primary fs-4">@totalDocuments</span>
                    </div>
                </CardContent>
            </SfCard>
        </div>
        
        <div class="col-md-3 mb-3">
            <SfCard>
                <CardContent>
                    <div class="text-center">
                        <i class="fas fa-clock fa-2x text-success mb-2"></i>
                        <h5>Recent Documents</h5>
                        <span class="badge bg-success fs-4">@recentDocuments</span>
                    </div>
                </CardContent>
            </SfCard>
        </div>
        
        <div class="col-md-3 mb-3">
            <SfCard>
                <CardContent>
                    <div class="text-center">
                        <i class="fas fa-layer-group fa-2x text-warning mb-2"></i>
                        <h5>Templates</h5>
                        <span class="badge bg-warning fs-4">@totalTemplates</span>
                    </div>
                </CardContent>
            </SfCard>
        </div>
        
        <div class="col-md-3 mb-3">
            <SfCard>
                <CardContent>
                    <div class="text-center">
                        <i class="fas fa-share-alt fa-2x text-info mb-2"></i>
                        <h5>Shared</h5>
                        <span class="badge bg-info fs-4">@sharedDocuments</span>
                    </div>
                </CardContent>
            </SfCard>
        </div>
    </div>

    <!-- Search and Filter -->
    <div class="row mb-4">
        <div class="col-md-6">
            <SfTextBox @bind-Value="searchTerm" 
                     Placeholder="Search documents..." 
                     ShowClearButton="true"
                     Input="OnSearchInput">
            </SfTextBox>
        </div>
        <div class="col-md-6 d-flex justify-content-end gap-2">
            <SfButton CssClass="btn btn-outline-secondary" OnClick="RefreshDocuments">
                <i class="fas fa-refresh me-2"></i>Refresh
            </SfButton>
        </div>
    </div>

    <!-- Documents Grid -->
    <div class="row">
        <div class="col-12">
            <SfCard>
                <CardHeader Title="@($"All Documents ({filteredDocuments.Count})")" />
                <CardContent>
                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3">Loading documents...</p>
                        </div>
                    }
                    else if (filteredDocuments?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Name</th>
                                        <th>Category</th>
                                        <th>Type</th>
                                        <th>Size</th>
                                        <th>Modified</th>
                                        <th>Created By</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var doc in filteredDocuments)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="@GetDocumentIcon(doc) me-2"></i>
                                                    <div>
                                                        <div class="fw-bold">@doc.Name</div>
                                                        @if (!string.IsNullOrEmpty(doc.Description))
                                                        {
                                                            <small class="text-muted">@doc.Description</small>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@(doc.Category ?? "General")</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-outline-primary">@(doc.FileType ?? "SFDT")</span>
                                            </td>
                                            <td>@FormatFileSize(doc.Size)</td>
                                            <td>
                                                <small>@doc.LastModified.ToString("MMM dd, yyyy")</small><br>
                                                <small class="text-muted">@doc.LastModified.ToString("HH:mm")</small>
                                            </td>
                                            <td>@(doc.CreatedBy ?? "System")</td>
                                            <td>
                                                <span class="badge bg-@(doc.Status == "Active" ? "success" : doc.Status == "Draft" ? "warning" : "secondary")">
                                                    @doc.Status
                                                </span>
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <SfButton CssClass="btn btn-sm btn-primary" 
                                                            OnClick="() => OpenDocument(doc)"
                                                            title="Open Document">
                                                        <i class="fas fa-edit"></i>
                                                    </SfButton>
                                                    
                                                    @if (doc.IsTemplate)
                                                    {
                                                        <SfButton CssClass="btn btn-sm btn-outline-info" 
                                                                OnClick="() => EditTemplate(doc.Id)"
                                                                title="Edit Template">
                                                            <i class="fas fa-layer-group"></i>
                                                        </SfButton>
                                                    }
                                                    
                                                    <SfButton CssClass="btn btn-sm btn-outline-secondary" 
                                                            OnClick="() => ShareDocument(doc.Id)"
                                                            title="Share Document">
                                                        <i class="fas fa-share"></i>
                                                    </SfButton>
                                                    
                                                    <SfButton CssClass="btn btn-sm btn-outline-success" 
                                                            OnClick="() => DownloadDocument(doc)"
                                                            title="Download">
                                                        <i class="fas fa-download"></i>
                                                    </SfButton>
                                                    
                                                    <SfButton CssClass="btn btn-sm btn-outline-danger" 
                                                            OnClick="() => DeleteDocument(doc)"
                                                            title="Delete Document">
                                                        <i class="fas fa-trash"></i>
                                                    </SfButton>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
                            <h5>No Documents Found</h5>
                            <p class="text-muted">
                                @if (string.IsNullOrEmpty(searchTerm))
                                {
                                    <span>Start by creating your first document or uploading existing files.</span>
                                }
                                else
                                {
                                    <span>No documents match your search criteria. Try adjusting your search terms.</span>
                                }
                            </p>
                            <div class="d-flex gap-2 justify-content-center">
                                <SfButton CssClass="btn btn-primary" OnClick="CreateNewDocument">
                                    <i class="fas fa-plus me-2"></i>Create Document
                                </SfButton>
                                <SfButton CssClass="btn btn-outline-primary" OnClick="UploadDocument">
                                    <i class="fas fa-upload me-2"></i>Upload Files
                                </SfButton>
                            </div>
                        </div>
                    }
                </CardContent>
            </SfCard>
        </div>
    </div>
</div>

@code {
    private List<Document> documents = new();
    private List<Document> filteredDocuments = new();
    private bool isLoading = true;
    private string searchTerm = "";
    
    // Stats
    private int totalDocuments = 0;
    private int recentDocuments = 0;
    private int totalTemplates = 0;
    private int sharedDocuments = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();
        await LoadStats();
    }

    private async Task LoadDocuments()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // DocumentRepository now automatically excludes templates
            var allDocs = await DocumentRepository.GetDocumentsAsync(1, 1000);
            documents = allDocs.ToList();
            ApplyFilter();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync("Error", $"Failed to load documents: {ex.Message}");
            documents = new List<Document>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadStats()
    {
        try
        {
            // Repository methods now automatically exclude templates from document counts
            totalDocuments = await DocumentRepository.GetTotalDocumentCountAsync();
            
            // Get recent documents (automatically excludes templates)
            var recent = await DocumentRepository.GetRecentDocumentsAsync(10);
            recentDocuments = recent.Count();
            
            // Get templates count
            var templates = await DocumentRepository.GetTemplatesAsync();
            totalTemplates = templates.Count();
            
            sharedDocuments = 0; // TODO: Implement shared documents count
        }
        catch (Exception ex)
        {
            // Stats are not critical, just log the error
            Console.WriteLine($"Error loading stats: {ex.Message}");
        }
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredDocuments = documents.ToList();
        }
        else
        {
            var term = searchTerm.ToLower();
            filteredDocuments = documents.Where(d => 
                d.Name.ToLower().Contains(term) ||
                (d.Description?.ToLower().Contains(term) ?? false) ||
                (d.Category?.ToLower().Contains(term) ?? false) ||
                (d.CreatedBy?.ToLower().Contains(term) ?? false)
            ).ToList();
        }
    }

    private void OnSearchInput(InputEventArgs args)
    {
        searchTerm = args.Value ?? "";
        ApplyFilter();
        StateHasChanged();
    }

    private async Task RefreshDocuments()
    {
        await LoadDocuments();
        await LoadStats();
        await NotificationService.ShowInfoAsync("Refreshed", "Documents list has been refreshed.");
    }

    private void CreateNewDocument()
    {
        Navigation.NavigateTo("/editor");
    }

    private void UploadDocument()
    {
        Navigation.NavigateTo("/documents/upload");
    }

    private void OpenDocument(Document doc)
    {
        if (doc.IsTemplate)
        {
            Navigation.NavigateTo($"/templates/editor/{doc.Id}");
        }
        else
        {
            Navigation.NavigateTo($"/editor/{doc.DocumentId}");
        }
    }

    private void EditTemplate(int templateId)
    {
        Navigation.NavigateTo($"/templates/editor/{templateId}");
    }

    private async Task ShareDocument(int documentId)
    {
        // TODO: Implement document sharing functionality
        await NotificationService.ShowInfoAsync("Coming Soon", "Document sharing functionality will be available soon.");
    }

    private async Task DownloadDocument(Document doc)
    {
        try
        {
            // TODO: Implement document download functionality
            await NotificationService.ShowInfoAsync("Download", $"Download for '{doc.Name}' will be available soon.");
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync("Error", $"Failed to download document: {ex.Message}");
        }
    }

    private async Task DeleteDocument(Document doc)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete '{doc.Name}'? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                var success = await DocumentRepository.DeleteDocumentAsync(doc.Id);
                
                if (success)
                {
                    documents.Remove(doc);
                    ApplyFilter();
                    await LoadStats();
                    
                    await NotificationService.ShowSuccessAsync("Deleted", $"'{doc.Name}' has been deleted successfully.");
                    StateHasChanged();
                }
                else
                {
                    await NotificationService.ShowErrorAsync("Error", "Failed to delete the document.");
                }
            }
            catch (Exception ex)
            {
                await NotificationService.ShowErrorAsync("Error", $"Failed to delete document: {ex.Message}");
            }
        }
    }

    private string GetDocumentIcon(Document doc)
    {
        if (doc.IsTemplate)
            return "fas fa-layer-group text-primary";
        
        return doc.FileType?.ToLower() switch
        {
            "sfdt" => "fas fa-file-alt text-primary",
            "docx" => "fas fa-file-word text-primary",
            "pdf" => "fas fa-file-pdf text-danger",
            _ => "fas fa-file text-secondary"
        };
    }

    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024.0:F1} KB";
        return $"{bytes / (1024.0 * 1024.0):F1} MB";
    }
} 